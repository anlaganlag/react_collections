{"ast":null,"code":"var _jsxFileName = \"/home/gal/Desktop/projects/react_learn_daily/react-advent-calendar/finished/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { StyledApp } from \"./AppStyles\";\nimport { createCalendar } from \"./helpers\";\nimport Hatch from \"./Hatch\";\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: center / cover url(\"./img/calendar_backdrop.jpg\");\n    margin: 0;\n  }\n`;\n\nfunction App() {\n  const [hatches, setHatches] = useState([]);\n  useEffect(() => {\n    // Could use if statements instead off course\n    const calendar = localStorage.calendar ? JSON.parse(localStorage.calendar) : createCalendar();\n    setHatches(calendar);\n  }, []); // Store calendar in localStorage\n\n  useEffect(() => {\n    // Could use if statements instead off course\n    hatches.length && localStorage.setItem(\"calendar\", JSON.stringify(hatches));\n  }, [hatches]);\n\n  const handleFlipHatch = id => {\n    const updatedHatches = hatches.map(hatch => hatch.id === id ? { ...hatch,\n      open: !hatch.open\n    } : hatch);\n    setHatches(updatedHatches);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledApp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, hatches.map(hatch => /*#__PURE__*/React.createElement(Hatch, {\n    key: hatch.id,\n    hatchData: hatch,\n    handleClick: handleFlipHatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/gal/Desktop/projects/react_learn_daily/react-advent-calendar/finished/src/App.js"],"names":["React","useState","useEffect","createGlobalStyle","StyledApp","createCalendar","Hatch","GlobalStyle","App","hatches","setHatches","calendar","localStorage","JSON","parse","length","setItem","stringify","handleFlipHatch","id","updatedHatches","map","hatch","open"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,WAAW,GAAGJ,iBAAkB;;;;;CAAtC;;AAOA,SAASK,GAAT,GAAe;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMS,QAAQ,GAAGC,YAAY,CAACD,QAAb,GACbE,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACD,QAAxB,CADa,GAEbN,cAAc,EAFlB;AAIAK,IAAAA,UAAU,CAACC,QAAD,CAAV;AACD,GAPQ,EAON,EAPM,CAAT,CAHa,CAYb;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,OAAO,CAACM,MAAR,IAAkBH,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCH,IAAI,CAACI,SAAL,CAAeR,OAAf,CAAjC,CAAlB;AACD,GAHQ,EAGN,CAACA,OAAD,CAHM,CAAT;;AAKA,QAAMS,eAAe,GAAGC,EAAE,IAAI;AAC5B,UAAMC,cAAc,GAAGX,OAAO,CAACY,GAAR,CAAYC,KAAK,IACtCA,KAAK,CAACH,EAAN,KAAaA,EAAb,GAAkB,EAAE,GAAGG,KAAL;AAAYC,MAAAA,IAAI,EAAE,CAACD,KAAK,CAACC;AAAzB,KAAlB,GAAoDD,KAD/B,CAAvB;AAGAZ,IAAAA,UAAU,CAACU,cAAD,CAAV;AACD,GALD;;AAOA,sBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,OAAO,CAACY,GAAR,CAAYC,KAAK,iBAChB,oBAAC,KAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACH,EADb;AAEE,IAAA,SAAS,EAAEG,KAFb;AAGE,IAAA,WAAW,EAAEJ,eAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAFF,CADF;AAcD;;AAED,eAAeV,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { StyledApp } from \"./AppStyles\";\nimport { createCalendar } from \"./helpers\";\nimport Hatch from \"./Hatch\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: center / cover url(\"./img/calendar_backdrop.jpg\");\n    margin: 0;\n  }\n`;\n\nfunction App() {\n  const [hatches, setHatches] = useState([]);\n\n  useEffect(() => {\n    // Could use if statements instead off course\n    const calendar = localStorage.calendar\n      ? JSON.parse(localStorage.calendar)\n      : createCalendar();\n\n    setHatches(calendar);\n  }, []);\n\n  // Store calendar in localStorage\n  useEffect(() => {\n    // Could use if statements instead off course\n    hatches.length && localStorage.setItem(\"calendar\", JSON.stringify(hatches));\n  }, [hatches]);\n\n  const handleFlipHatch = id => {\n    const updatedHatches = hatches.map(hatch =>\n      hatch.id === id ? { ...hatch, open: !hatch.open } : hatch\n    );\n    setHatches(updatedHatches);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <StyledApp>\n        {hatches.map(hatch => (\n          <Hatch\n            key={hatch.id}\n            hatchData={hatch}\n            handleClick={handleFlipHatch}\n          />\n        ))}\n      </StyledApp>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}